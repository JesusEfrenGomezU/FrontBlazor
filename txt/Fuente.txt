@page "/fuente/crear"
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<h1>Crear Fuente</h1>

<EditForm Model="@nuevaFuente" OnValidSubmit="GuardarFuente">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="nombre" class="form-label">Nombre:</label>
        <InputText id="nombre" class="form-control" @bind-Value="nuevaFuente["nombre"]" />
    </div>

    <div class="mb-3">
        <label for="fkidtipofuente" class="form-label">Tipo Fuente:</label>
        <select id="fkidtipofuente" class="form-select" @bind="nuevaFuente["fkidtipofuente"]">
            <option value="">-- Selecciona --</option>
            @foreach (var tipo in listaTipoFuente)
            {
                <option value="@tipo["id"]">@tipo["nombre"]</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Guardar</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="Cancelar">Cancelar</button>

    @if (!string.IsNullOrWhiteSpace(mensaje))
    {
        <div class="alert alert-info mt-3">@mensaje</div>
    }
</EditForm>

@code {
    private Dictionary<string, object> nuevaFuente = new()
    {
        { "nombre", string.Empty },
        { "fkidtipofuente", string.Empty }
    };

    private List<Dictionary<string, object>> listaTipoFuente = new();
    private string? mensaje;

    private const string PROYECTO = "proyecto";
    private const string TABLA = "fuente";

    protected override async Task OnInitializedAsync()
    {
        listaTipoFuente = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "tipofuente") ?? new();
    }

    private async Task GuardarFuente()
    {
        bool resultado = await servicioEntidad.CrearAsync(PROYECTO, TABLA, nuevaFuente);

        if (resultado)
        {
            mensaje = "Fuente creada exitosamente.";
            navegacionManager.NavigateTo("/fuente");
        }
        else
        {
            mensaje = "Error al crear la fuente.";
        }
    }

    private void Cancelar()
    {
        navegacionManager.NavigateTo("/fuente");
    }
}
@page "/fuente"
@using System.Collections.Generic  
@using System.Threading.Tasks
@using Services  
@inject ServicioEntidad servicioEntidad  
@inject NavigationManager navegacionManager  

<PageTitle>Lista de Fuentes</PageTitle>

<h1>Fuentes</h1>

<button class="btn btn-success mb-3" @onclick="CrearFuente">  
    <i class="bi bi-plus-lg"></i> Crear Fuente  
</button>

@if (cargando)
{
    <p><em>Cargando...</em></p>  
}
else if (tablas == null || tablas.Count == 0)
{
    <p>No hay fuentes disponibles.</p>  
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Tipo Fuente</th>
                    <th class="text-center" style="white-space: nowrap;">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tabla in tablas)
                {
                    <tr>
                        <td>@ObtenerValor(tabla, "id")</td>
                        <td>@ObtenerValor(tabla, "nombre")</td>
                        <td>@ObtenerForanea(listaTipoFuente, ObtenerValor(tabla, "fkidtipofuente"), "nombre")</td>
                        <td class="text-center" style="white-space: nowrap;">
                            <div class="d-inline-flex">
                                <button class="btn btn-primary btn-sm me-1" @onclick="() => EditarFuente(tabla)" title="Editar">
                                    <i class="bi bi-pencil-fill"></i>
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarFuente(tabla)" title="Eliminar">
                                    <i class="bi bi-trash-fill"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (!string.IsNullOrEmpty(errorMensaje))
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    private List<Dictionary<string, object>> tablas = new();
    private List<Dictionary<string, object>> listaTipoFuente = new();
    private bool cargando = true;
    private string? errorMensaje;

    private const string PROYECTO = "proyecto";
    private const string TABLA = "fuente";

    protected override async Task OnInitializedAsync()
    {
        await CargarTabla();
        await CargarListasRelacionadas();
    }

    private async Task CargarTabla()
    {
        cargando = true;
        errorMensaje = null;
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            tablas = resultado ?? new List<Dictionary<string, object>>();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarListasRelacionadas()
    {
        listaTipoFuente = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "tipofuente") ?? new();
    }

    private string ObtenerValor(Dictionary<string, object> dic, string clave)
    {
        if (dic != null && dic.TryGetValue(clave, out var val))
        {
            if (val == null || val.ToString() == "0") return string.Empty;
            return val.ToString() ?? string.Empty;
        }
        return string.Empty;
    }

    private string ObtenerForanea(List<Dictionary<string, object>> lista, string id, string campo)
    {
        if (string.IsNullOrWhiteSpace(id)) return string.Empty;

        var item = lista.FirstOrDefault(x => x.TryGetValue("id", out var val) && val?.ToString() == id);
        if (item != null && item.TryGetValue(campo, out var foranea))
            return foranea?.ToString() ?? string.Empty;

        return string.Empty;
    }

    private void CrearFuente()
    {
        navegacionManager.NavigateTo("/fuente/crear");
    }

    private void EditarFuente(Dictionary<string, object> tabla)
    {
        var id = ObtenerValor(tabla, "id");
        navegacionManager.NavigateTo($"/fuente/editar/{id}");
    }

    private async void EliminarFuente(Dictionary<string, object> tabla)
    {
        var id = ObtenerValor(tabla, "id");
        bool eliminado = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", id);
        if (eliminado)
        {
            tablas.Remove(tabla); // Refresca la vista eliminando el ítem localmente
        }
        else
        {
            errorMensaje = $"No se pudo eliminar la fuente con ID {id}.";
        }
    }
}



﻿<!-- Contenedor superior del menú de navegación -->
<!-- top-row: define altura y posición, ps-3: padding izquierdo, navbar navbar-dark: estilos de Bootstrap para la barra de navegación oscura -->
<div class="top-row ps-3 navbar navbar-dark">
    <!-- container-fluid: contenedor que ocupa todo el ancho disponible (Bootstrap) -->
    <div class="container-fluid">
        <!-- navbar-brand: estilo para el logo/nombre de la aplicación -->
        <!-- href="": enlace a la página de inicio -->
        <a class="navbar-brand" href="">FrontBlazor</a>

        <!-- Botón hamburguesa para mostrar/ocultar el menú en dispositivos móviles -->
        <!-- title: texto que aparece al pasar el cursor sobre el botón -->
        <!-- navbar-toggler: estilo Bootstrap para el botón de alternar menú -->
        <!-- @onclick: evento que llama al método ToggleNavMenu cuando se hace clic -->
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <!-- Icono de tres líneas horizontales (hamburguesa) -->
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<!-- Contenedor principal del menú de navegación -->
<!-- @NavMenuCssClass: clase dinámica que controla si el menú está colapsado o no -->
<!-- nav-scrollable: permite desplazamiento si el menú es muy largo -->
<!-- @onclick: colapsa el menú al hacer clic en cualquier opción (en dispositivos móviles) -->
<div class="@NavMenuCssClass nav-scrollable">
    <!-- Elemento de navegación con disposición en columna vertical -->
    <nav class="flex-column">
        <!-- Primera opción de menú: Home -->
        <!-- nav-item: estilo para elemento de navegación, px-3: padding horizontal -->
        <div class="nav-item px-3">
            <!-- NavLink: componente especial de Blazor para navegación que resalta automáticamente la página actual -->
            <!-- href="": enlace a la ruta raíz -->
            <!-- Match="NavLinkMatch.All": solo se activa cuando la ruta es exactamente "/" -->
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <!-- Icono para la opción Home -->
                <!-- bi bi-house-door-fill-nav-menu: clases para el icono de casa -->
                <!-- aria-hidden="true": oculta el icono para lectores de pantalla -->
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>


        <div class="nav-item px-3">
            <div class="nav-link accordion text-center">
                Modulo Legal
                <span class="arrow">▼</span>
            </div>
            <div class="panel">
                <div class=" nav-item px-3">
                    <NavLink class="nav-link" href="seccion">
                        Sección
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="subseccion">
                        Subsección
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="articulo">
                        Articulo
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="paragrafo">
                        Paragrafo
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="literal">
                        Literal
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="numeral">
                        Numeral
                    </NavLink>
                </div>
            </div>
        </div>

        <div class="nav-item px-3">
            <div class="nav-link accordion text-center">Modulo de Indicadores <span class="arrow">▼</span></div>
            <div class="panel">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="frecuencia">
                        Frecuencia
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="tipoindicador">
                        Tipo indicador
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="tipoactor">
                        Tipo actor
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="sentido">
                        Sentido
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="represenvisual">
                        Represenvisual
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="fuente">
                        Fuente
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="unidadmedicion">
                        Unidad medición
                    </NavLink>
                </div>
            </div>
        </div>

        <div class="nav-item px-3">
            <div class="nav-link accordion text-center">Modulo de Usuarios <span class="arrow">▼</span></div>
            <div class="panel">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="rol">
                        Rol
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="usuario">
                        Usuario
                    </NavLink>
                </div>
            </div>
        </div>


    </nav>
</div>


<style>
    .accordion:hover {
        background-color: rgba(255, 255, 255, 0.1);
        color: white;
    }

    .panel {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.5s ease;
    }

    .arrow {
        display: inline-block;
        margin-left: 8px;
        transition: transform 0.3s ease;
    }

    .accordion.active .arrow {
        transform: rotate(180deg);
    }
</style>

<script>
    var acc = document.getElementsByClassName("accordion");
    var i;

    for (i = 0; i < acc.length; i++) {
        acc[i].addEventListener("click", function () {

            this.classList.toggle("active");

            const panel = this.nextElementSibling;

            if (panel.style.maxHeight) {
                panel.style.maxHeight = panel.scrollHeight + "px";
                requestAnimationFrame(() => {
                    panel.style.maxHeight = "0";
                });
                setTimeout(() => {
                    panel.style.maxHeight = null;
                }, 400);
            } else {
                panel.style.maxHeight = panel.scrollHeight + "px";
            }
        });
    }
</script>

<!-- Bloque de código C# que define la lógica del componente -->
@code {
    // Variable que controla si el menú está colapsado (valor inicial: true)
    private bool collapseNavMenu = true;

    // Propiedad que devuelve la clase CSS según el estado del menú
    // Si está colapsado, devuelve "collapse", de lo contrario, null
    // El signo ? indica que puede devolver null (string nullable)
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    // Método que invierte el estado del menú (colapsado/expandido)
    // Se ejecuta cuando se hace clic en el botón hamburguesa
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}