@page "/usuario"
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using FrontBlazor.Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JS

<PageTitle>Gestión de Usuarios</PageTitle>

<h1>Usuarios</h1>

<!-- BUSCADOR -->
<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Buscar usuario (email o rol)..." @bind="searchTerm" />
    <button class="btn btn-outline-secondary" @onclick="BuscarUsuario">
        <i class="bi bi-search"></i>
    </button>
</div>

<!-- BOTÓN CREAR -->
<button class="btn btn-primary mb-3" disabled="@(!canCreate)" @onclick="ShowCreateModal">
    <i class="bi bi-plus-lg"></i> Crear Usuario
</button>

<!-- MODAL CREAR -->
@if (showCreateModal)
{
    <div class="overlay">
        <div class="popup">
            <h3>Nuevo Usuario</h3>
            <div class="form-group">
                <label>Email</label>
                <input class="form-control" @bind="newEmail" placeholder="usuario@dominio.com" />
            </div>
            <div class="form-group">
                <label>Contraseña</label>
                <input type="password" class="form-control" @bind="newContrasena" />
            </div>
            <div class="form-group">
                <label>Roles</label>
                <div>
                    @foreach (var rol in listaRoles)
                    {
                        var rolId = int.Parse(ObtenerValor(rol, "id"));
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="chk_@rolId"
                                   @onchange="e => OnNewRoleChanged(rolId, e.Value)"
                                   checked="@newFkidRols.Contains(rolId)" />
                            <label class="form-check-label" for="chk_@rolId">
                                @ObtenerValor(rol, "nombre")
                            </label>
                        </div>
                    }
                </div>
            </div>
            <div class="popup-actions">
                <button class="btn btn-success" @onclick="OnSubmitCreateAsync" disabled="@( !canCreate )">Guardar</button>
                <button class="btn btn-secondary" @onclick="HideCreateModal">Cancelar</button>
            </div>
        </div>
    </div>
}

<!-- LISTADO -->
@if (loading)
{
    <p><em>Cargando...</em></p>
}
else if (usuarios == null || usuarios.Count == 0)
{
    <p>No hay usuarios registrados.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Email</th>
                    <th>Roles</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in usuarios)
                {
                    <tr>
                        <td>@ObtenerValor(user, "email")</td>
                        <td>
                            @foreach(var rid in GetUserRoles(user))
                            {
                                <span class="badge bg-secondary me-1">@ObtenerForanea(listaRoles, rid.ToString(), "nombre")</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-primary btn-sm me-1" @onclick="() => EditUsuario(user)" disabled="@( !canEdit )">
                                <i class="bi bi-pencil-fill"></i>
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteUsuario(user)" disabled="@( !canDelete )">
                                <i class="bi bi-trash-fill"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- MODAL EDICIÓN -->
@if (showEditModal)
{
    <div class="overlay">
        <div class="popup">
            <h3>Editar Roles de Usuario</h3>
            <div class="form-group">
                <label>Email</label>
                <input class="form-control" @bind="editEmail" disabled />
            </div>
            <div class="form-group">
                <label>Roles</label>
                <div>
                    @foreach (var rol in listaRoles)
                    {
                        var rolId = int.Parse(ObtenerValor(rol, "id"));
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="edit_chk_@rolId"
                                   @onchange="e => OnEditRoleChanged(rolId, e.Value)"
                                   checked="@editFkidRols.Contains(rolId)" />
                            <label class="form-check-label" for="edit_chk_@rolId">
                                @ObtenerValor(rol, "nombre")
                            </label>
                        </div>
                    }
                </div>
            </div>
            <div class="popup-actions">
                <button class="btn btn-success" @onclick="OnSubmitEditAsync" disabled="@( !canEdit )">Guardar</button>
                <button class="btn btn-secondary" @onclick="HideEditModal">Cancelar</button>
            </div>
        </div>
    </div>
}

@code {
    private const string PROYECTO = "proyecto";
    private const string TABLA_USUARIO = "usuario";
    private const string TABLA_ROL_USUARIO = "rol_usuario";
    private const string TABLA_ROL = "rol";

    private List<Dictionary<string, object>> usuarios = new();
    private List<Dictionary<string, object>> listaRoles = new();
    private List<int> newFkidRols = new();
    private List<int> editFkidRols = new();
    private string searchTerm = string.Empty;
    private bool loading = true;

    private bool canCreate, canEdit, canDelete;

    private bool showCreateModal = false;
    private string newEmail = string.Empty;
    private string newContrasena = string.Empty;

    private bool showEditModal = false;
    private string editEmail = string.Empty;
    private Dictionary<string, object>? selectedUser;

    private string[] userRoles = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        listaRoles = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA_ROL) ?? new();
        await LoadUsuariosAsync();
        loading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userRoles = await JS.InvokeAsync<string[]>("eval", @"
                Object.keys(sessionStorage)
                     .filter(k => k.startsWith('rol_'))
                     .map(k => sessionStorage.getItem(k));");

            canCreate = userRoles.Contains("admin");
            canEdit = userRoles.Contains("admin");
            canDelete = userRoles.Contains("admin");

            StateHasChanged();
        }
    }

    private async Task LoadUsuariosAsync()
    {
        var users = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA_USUARIO) ?? new();
        var ru = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA_ROL_USUARIO) ?? new();
        usuarios = users.Select(u => {
            var email = ObtenerValor(u, "email");
            u["roles"] = ru.Where(r => ObtenerValor(r, "fkemail") == email)
                            .Select(r => int.Parse(ObtenerValor(r, "fkidrol")))
                            .ToList();
            return u;
        }).ToList();
    }

    private IEnumerable<int> GetUserRoles(Dictionary<string, object> user)
        => user.TryGetValue("roles", out var v) && v is List<int> list ? list : Enumerable.Empty<int>();

    private void BuscarUsuario()
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return;
        var term = searchTerm.ToLowerInvariant();
        usuarios = usuarios.Where(u =>
            ObtenerValor(u, "email").ToLowerInvariant().Contains(term)
         || GetUserRoles(u).Select(rid => ObtenerForanea(listaRoles, rid.ToString(), "nombre").ToLowerInvariant())
                           .Any(n => n.Contains(term))
        ).ToList();
    }

    private void ShowCreateModal()
    {
        newEmail = newContrasena = string.Empty;
        newFkidRols.Clear();
        showCreateModal = true;
    }
    private void HideCreateModal() => showCreateModal = false;
    private void HideEditModal() => showEditModal = false;

    private void OnNewRoleChanged(int roleId, object checkedValue)
    {
        var isChecked = (bool)checkedValue;
        if (isChecked) newFkidRols.Add(roleId);
        else newFkidRols.Remove(roleId);
    }
    private void OnEditRoleChanged(int roleId, object checkedValue)
    {
        var isChecked = (bool)checkedValue;
        if (isChecked) editFkidRols.Add(roleId);
        else editFkidRols.Remove(roleId);
    }

    private async Task OnSubmitCreateAsync()
    {
        var userEntity = new Dictionary<string, object> { ["email"] = newEmail, ["contrasena"] = newContrasena };
        var ok1 = await servicioEntidad.CrearAsync(PROYECTO, TABLA_USUARIO, userEntity);
        foreach (var rid in newFkidRols)
        {
            var roleEntity = new Dictionary<string, object> { ["fkemail"] = newEmail, ["fkidrol"] = rid };
            await servicioEntidad.CrearAsync(PROYECTO, TABLA_ROL_USUARIO, roleEntity);
        }
        if (ok1)
        {
            await LoadUsuariosAsync();
            HideCreateModal();
        }
    }

    private void EditUsuario(Dictionary<string, object> user)
    {
        selectedUser = user;
        editEmail = ObtenerValor(user, "email");
        editFkidRols = GetUserRoles(user).ToList();
        showEditModal = true;
    }

    private async Task OnSubmitEditAsync()
    {
        if (selectedUser == null) return;
        var email = editEmail;
        // Remove all old
        await servicioEntidad.EliminarAsync(PROYECTO, TABLA_ROL_USUARIO, "fkemail", email);
        // Add new
        foreach (var rid in editFkidRols)
        {
            var roleEntity = new Dictionary<string, object> { ["fkemail"] = email, ["fkidrol"] = rid };
            await servicioEntidad.CrearAsync(PROYECTO, TABLA_ROL_USUARIO, roleEntity);
        }
        await LoadUsuariosAsync();
        HideEditModal();
    }

    private void DeleteUsuario(Dictionary<string, object> user)
    {
        var email = ObtenerValor(user, "email");
        _ = servicioEntidad.EliminarAsync(PROYECTO, TABLA_ROL_USUARIO, "fkemail", email);
        _ = servicioEntidad.EliminarAsync(PROYECTO, TABLA_USUARIO, "email", email);
        usuarios.Remove(user);
    }

    private string ObtenerValor(Dictionary<string, object> dic, string clave)
        => dic.TryGetValue(clave, out var val) && val != null ? val.ToString()! : string.Empty;

    private string ObtenerForanea(List<Dictionary<string, object>> lista, string id, string campo)
    {
        if (string.IsNullOrWhiteSpace(id)) return string.Empty;
        var item = lista.FirstOrDefault(x => x.TryGetValue("id", out var v) && v?.ToString() == id);
        return item != null && item.TryGetValue(campo, out var f) ? f?.ToString() ?? string.Empty : string.Empty;
    }
}

<style>
.overlay { position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index:1000; }
.popup { background:#fff; padding:20px; border-radius:8px; box-shadow:0 2px 10px rgba(0,0,0,0.3); width:400px; max-height:80vh; overflow:auto; }
.form-group { margin-bottom:15px; }
.popup-actions { display:flex; justify-content:flex-end; gap:10px; margin-top:10px; }
</style>
