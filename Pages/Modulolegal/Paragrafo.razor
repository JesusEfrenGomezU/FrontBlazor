<!-- Parágrafo -->
@page "/paragrafo"
@using System.Collections.Generic  
@using System.Linq
@using FrontBlazor.Services  
@inject ServicioEntidad servicioEntidad
@inherits ValidacionAcceso

<PageTitle>Listado Párrafos</PageTitle>

<h1>Párrafos</h1>

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Buscar id, descripción o artículo..." @bind="searchTerm" />
    <button class="btn btn-outline-secondary" @onclick="Buscar">
        <i class="bi bi-search"></i>
    </button>
</div>

@if (cargando)
{
    <p><em>Cargando...</em></p>
}
else if (tablas == null || tablas.Count == 0)
{
    <p>No hay párrafos disponibles.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr><th>ID</th><th>Descripción</th><th>Artículo</th></tr>
            </thead>
            <tbody>
                @foreach (var item in tablas)
                {
                    <tr>
                        <td>@ObtenerValor(item, "id")</td>
                        <td>@ObtenerValor(item, "descripcion")</td>
                        <td>@ObtenerForanea(listaArticulo, ObtenerValor(item, "fkidarticulo"), "nombre")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private const string PROYECTO = "proyecto";
    private const string TABLA    = "paragrafo";

    private List<Dictionary<string, object>> tablas       = new();
    private List<Dictionary<string, object>> listaArticulo = new();
    private string searchTerm = string.Empty;
    private bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        listaArticulo = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "articulo") ?? new();
        tablas        = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA)     ?? new();
        cargando      = false;
    }

    private void Buscar()
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return;
        var term = searchTerm.ToLowerInvariant();
        tablas = tablas.Where(t =>
            ObtenerValor(t, "id").ToLowerInvariant().Contains(term)
         || ObtenerValor(t, "descripcion").ToLowerInvariant().Contains(term)
         || ObtenerForanea(listaArticulo, ObtenerValor(t, "fkidarticulo"), "nombre").ToLowerInvariant().Contains(term)
        ).ToList();
    }

    private string ObtenerValor(Dictionary<string, object> dic, string clave) =>
        dic.TryGetValue(clave, out var v) && v != null ? v.ToString()! : string.Empty;

    private string ObtenerForanea(List<Dictionary<string, object>> lista, string id, string campo)
    {
        if (string.IsNullOrWhiteSpace(id)) return string.Empty;
        var item = lista.FirstOrDefault(x => x.TryGetValue("id", out var v) && v?.ToString() == id);
        return item != null && item.TryGetValue(campo, out var f) ? f?.ToString()! : string.Empty;
    }
}