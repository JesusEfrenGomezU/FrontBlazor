@page "/Consultasresponsables"
@using System.Collections.Generic  
@using System.Net.Http.Json
@using System.Text
@using System.Text.Json  
@using System.Threading.Tasks
@using FrontBlazor.Services  
@inject ServicioEntidad servicioEntidad  
@inject NavigationManager navegacionManager
@inject IJSRuntime JS
@inherits ValidacionAcceso

<PageTitle>Responsables por Indicador</PageTitle>

<h1>Responsables por Indicador</h1>

@if (cargando)
{
    <p><em>Cargando...</em></p>
}
else if (!string.IsNullOrEmpty(errorMensaje))
{
    <div class="alert alert-danger">@errorMensaje</div>
}
else if (tablas == null || tablas.Count == 0)
{
    <p>No hay indicadores disponibles.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Código</th>
                    <th>Objetivo</th>
                    <th>Fórmula</th>
                    <th>Meta</th>
                    <th>Responsables</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in tablas)
                {
                    <tr>
                        <td>@ObtenerValor(item, "id")</td>
                        <td>@ObtenerValor(item, "nombre")</td>
                        <td>@ObtenerValor(item, "codigo")</td>
                        <td>@ObtenerValor(item, "objetivo")</td>
                        <td>@ObtenerValor(item, "formula")</td>
                        <td>@ObtenerValor(item, "meta")</td>
                        <td>@ObtenerResponsables(item)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Dictionary<string, object>> tablas = new();
    private List<Dictionary<string, object>> listaActores = new();
    private List<Dictionary<string, object>> listaTipoActor = new();
    private List<Dictionary<string, object>> listaResponsablesPorIndicador = new();
    private bool cargando = true;
    private string? errorMensaje;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosAsync();
    }

    private async Task CargarDatosAsync()
    {
        cargando = true;
        errorMensaje = null;
        try
        {
            tablas = await servicioEntidad.ObtenerTodosAsync("proyecto", "indicador")
                      ?? new List<Dictionary<string, object>>();

            listaActores = await servicioEntidad.ObtenerTodosAsync("proyecto", "actor")
                            ?? new List<Dictionary<string, object>>();

            listaTipoActor = await servicioEntidad.ObtenerTodosAsync("proyecto", "tipoactor")
                                ?? new List<Dictionary<string, object>>();

            listaResponsablesPorIndicador = await servicioEntidad.ObtenerTodosAsync("proyecto", "responsablesporindicador")
                                              ?? new List<Dictionary<string, object>>();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar datos: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private string ObtenerValor(Dictionary<string, object> dic, string clave)
    {
        if (dic.TryGetValue(clave, out var val) && val != null && val.ToString() != "0")
            return val.ToString()!;
        return string.Empty;
    }

    private string ObtenerResponsables(Dictionary<string, object> tabla)
    {
        if (!int.TryParse(ObtenerValor(tabla, "id"), out var id))
            return string.Empty;

        // IDs de responsables asignados
        var actorIds = listaResponsablesPorIndicador
            .Where(r => int.Parse(ObtenerValor(r, "fkidindicador")) == id)
            .Select(r => ObtenerValor(r, "fkidresponsable"))
            .ToHashSet();

        // Construir lista "Nombre (Tipo)"
        var responsables = listaActores
            .Where(a => actorIds.Contains(ObtenerValor(a, "id")))
            .Select(a =>
            {
                var nombre = ObtenerValor(a, "nombre");
                var tipoId = int.Parse(ObtenerValor(a, "fkidtipoactor"));
                var tipo = listaTipoActor
                    .FirstOrDefault(t => int.Parse(ObtenerValor(t, "id")) == tipoId);
                var tipoNom = tipo is null ? string.Empty : ObtenerValor(tipo, "nombre");
                return $"{nombre} ({tipoNom})";
            });

        return string.Join(", ", responsables);
    }
}