@page "/actor/crear"
@inject FrontBlazor.Services.ServicioEntidad servicioEntidad
@inject NavigationManager navigationManager

<h3>Crear Actor</h3>

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <div class="mb-3">
        <label>ID</label>
        <InputText class="form-control" @bind-Value="Id" />
    </div>

    <div class="mb-3">
        <label>Nombre</label>
        <InputText class="form-control" @bind-Value="Nombre" />
    </div>

    <div class="mb-3">
        <label>Tipo de Actor</label>
        <select class="form-select" @bind="FkIdTipoActor">
            <option value="">-- Selecciona --</option>
            @foreach (var item in ListaTipoActor)
            {
                <option value="@ObtenerValor(item, "id")">@ObtenerValor(item, "nombre")</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Guardar</button>
    <button class="btn btn-secondary ms-2" @onclick="Volver">Cancelar</button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="alert alert-info mt-3">@mensaje</div>
}

@code {
    private string Id { get; set; } = string.Empty;
    private string Nombre { get; set; } = string.Empty;
    private string FkIdTipoActor { get; set; } = string.Empty;
    private string? mensaje;

    private List<Dictionary<string, object>> ListaTipoActor = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ListaTipoActor = await servicioEntidad.ObtenerTodosAsync("proyecto", "tipoactor") ?? new();
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar tipos de actor: {ex.Message}";
        }
    }

    private async Task OnSubmit()
    {
        var nuevoRegistro = new Dictionary<string, object>
        {
            { "id", Id },
            { "nombre", Nombre },
            { "fkidtipoactor", FkIdTipoActor }
        };

        bool creado = await servicioEntidad.CrearAsync("proyecto", "actor", nuevoRegistro);
        if (creado)
        {
            navigationManager.NavigateTo("/actor");
        }
        else
        {
            mensaje = "Error al crear el actor.";
        }
    }

    private void Volver()
    {
        navigationManager.NavigateTo("/actor");
    }

    private string ObtenerValor(Dictionary<string, object> dic, string clave)
    {
        return dic.TryGetValue(clave, out var val) ? val?.ToString() ?? "" : "";
    }
}
