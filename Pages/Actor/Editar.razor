@page "/actor/editar/{id}"
@inject FrontBlazor.Services.ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<h3>Editar Actor</h3>

@if (cargando)
{
    <p><em>Cargando actor...</em></p>
}
else if (registroActual != null)
{
    <EditForm Model="@registroActual" OnValidSubmit="ActualizarActor">
        @foreach (var columna in columnasActor)
        {
            <div class="mb-3">
                <label>@columna</label>

                @if (columna == "id")
                {
                    <InputText class="form-control" @bind-Value="registroActual[columna]" disabled />
                }
                else if (foraneas.ContainsKey(columna))
                {
                    <select class="form-select" @bind="registroActual[columna]">
                        <option value="">-- Selecciona --</option>
                        @foreach (var item in foraneas[columna])
                        {
                            <option value="@item["id"]">@item["nombre"]</option>
                        }
                    </select>
                }
                else
                {
                    <InputText class="form-control" @bind-Value="registroActual[columna]" />
                }
            </div>
        }

        <button type="submit" class="btn btn-primary">Guardar cambios</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Volver">Cancelar</button>
    </EditForm>

    @if (!string.IsNullOrWhiteSpace(mensaje))
    {
        <div class="alert alert-info mt-3">@mensaje</div>
    }
}
else
{
    <div class="alert alert-warning">No se encontró el actor con el ID proporcionado.</div>
}

@code {
    [Parameter] public string? id { get; set; }

    private Dictionary<string, string> registroActual = new();
    private Dictionary<string, List<Dictionary<string, object>>> foraneas = new();
    private List<string> columnasActor = new() { "id", "nombre", "fkidtipoactor" };
    private string mensaje = string.Empty;
    private bool cargando = true;

    private const string PROYECTO = "proyecto";
    private const string TABLA = "actor";

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(id))
        {
            mensaje = "ID no válido.";
            return;
        }

        cargando = true;

        var resultado = await servicioEntidad.ObtenerPorClaveAsync(PROYECTO, TABLA, "id", id);
        if (resultado != null)
        {
            registroActual = resultado.ToDictionary(kvp => kvp.Key, kvp => kvp.Value?.ToString() ?? string.Empty);
        }

        // Cargar listas de campos foráneos
        foreach (var columna in columnasActor)
        {
            if (columna.StartsWith("fk"))
            {
                var tablaRelacionada = columna.Replace("fkid", "").Replace("fk", "");  // Ej: "fkidtipoactor" → "tipoactor"
                var lista = await servicioEntidad.ObtenerTodosAsync(PROYECTO, tablaRelacionada.ToLower());
                if (lista != null)
                    foraneas[columna] = lista;
            }
        }

        cargando = false;
    }

    private async Task ActualizarActor()
{
    var datos = registroActual.ToDictionary(kvp => kvp.Key, kvp => (object)kvp.Value!);
    bool exito = await servicioEntidad.ActualizarAsync(PROYECTO, TABLA, "id", id!, datos);

    if (exito)
    {
        navegacionManager.NavigateTo("/actor");  // Redirigir si fue exitoso
    }
    else
    {
        mensaje = "Error al actualizar el actor.";
    }
}


    private void Volver()
    {
        navegacionManager.NavigateTo("/actor");
    }
}
