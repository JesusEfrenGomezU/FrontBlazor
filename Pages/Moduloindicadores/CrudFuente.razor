@page "/fuente"
@using System.Collections.Generic  
@using System.Threading.Tasks
@using Services  
@inject ServicioEntidad servicioEntidad  
@inject NavigationManager navegacionManager  

<PageTitle>Lista de Fuentes</PageTitle>

<h1>Fuentes</h1>

<button class="btn btn-success mb-3" @onclick="CrearFuente">  
    <i class="bi bi-plus-lg"></i> Crear Fuente  
</button>

@if (cargando)
{
    <p><em>Cargando...</em></p>  
}
else if (tablas == null || tablas.Count == 0)
{
    <p>No hay fuentes disponibles.</p>  
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tabla in tablas)
                {
                    <tr>
                        <td>@ObtenerValor(tabla, "id")</td>
                        <td>@ObtenerValor(tabla, "nombre")</td>
                        <td class="text-center" style="white-space: nowrap;">
                            <div class="d-inline-flex">
                                <button class="btn btn-primary btn-sm me-1" @onclick="() => EditarFuente(tabla)" title="Editar">
                                    <i class="bi bi-pencil-fill"></i>
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarFuente(tabla)" title="Eliminar">
                                    <i class="bi bi-trash-fill"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (!string.IsNullOrEmpty(errorMensaje))
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    private List<Dictionary<string, object>> tablas = new();
    private bool cargando = true;
    private string? errorMensaje;

    private const string PROYECTO = "proyecto";
    private const string TABLA = "fuente";

    protected override async Task OnInitializedAsync()
    {
        await CargarTabla();
    }

    private async Task CargarTabla()
    {
        cargando = true;
        errorMensaje = null;
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            tablas = resultado ?? new List<Dictionary<string, object>>();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private string ObtenerValor(Dictionary<string, object> dic, string clave)
    {
        if (dic != null && dic.TryGetValue(clave, out var val))
        {
            return val?.ToString() ?? string.Empty;
        }
        return string.Empty;
    }

    private void CrearFuente()
    {
        navegacionManager.NavigateTo("/fuente/crear");
    }

    private void EditarFuente(Dictionary<string, object> tabla)
    {
        var id = ObtenerValor(tabla, "id");
        navegacionManager.NavigateTo($"/fuente/editar/{id}");
    }



    private async void EliminarFuente(Dictionary<string, object> tabla)
    {
        var id = ObtenerValor(tabla, "id");
        bool eliminado = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", id);
        if (eliminado)
        {
            tablas.Remove(tabla);
        }
        else
        {
            errorMensaje = $"No se pudo eliminar la fuente con ID {id}.";
        }
    }
}
