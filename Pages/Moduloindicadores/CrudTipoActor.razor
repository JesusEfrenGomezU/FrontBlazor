@page "/tipoactor"
@using System.Collections.Generic  
@using FrontBlazor.Services  
@inject ServicioEntidad servicioEntidad  
@inject IJSRuntime JS



<PageTitle>Tipo de Actor</PageTitle>

<h1>Tipo Actor</h1>


<!-- BUSCADOR -->
<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Buscar tipo de actor..." @bind="searchTerm" />
    <button class="btn btn-outline-secondary" type="button" @onclick="BuscarTipoActor">
        <i class="bi bi-search"></i>
    </button>
</div>

<!-- BOTÓN CREAR -->
<button class="btn btn-primary mb-3 @(canCreate ? "" : "opacity-50")"
        disabled="@( !canCreate )"
        @onclick="() => { if (canCreate) ShowCreateModal(); }">
    <i class="bi bi-plus-lg"></i> Crear Tipo Actor
</button>

<!-- MODAL CREAR -->
@if (showCreateModal)
{
    <div class="overlay">
        <div class="popup">
            <h3>Nuevo Tipo Actor</h3>

            <div class="form-group">
                <label>Nombre</label>
                <input class="form-control" @bind="newNombre" />
            </div>

            <div class="popup-actions">
                <button class="btn btn-success" @onclick="OnSubmitCreateAsync">Guardar</button>
                <button class="btn btn-secondary" @onclick="HideCreateModal">Cancelar</button>
            </div>
        </div>
    </div>
}

<!-- LISTADO -->
@if (cargando)
{
    <p><em>Cargando...</em></p>
}
else if (tipos == null || tipos.Count == 0)
{
    <p>No hay tipos de actor disponibles.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var tipo in tipos)
                {
                    <tr>
                        <td>@ObtenerValor(tipo, "id")</td>
                        <td>@ObtenerValor(tipo, "nombre")</td>
                        <td>
                            <button class="btn btn-primary btn-sm me-1 @(canEdit ? "" : "opacity-50")"
                                    @onclick="() => { if (canEdit) EditarTipo(tipo); }">
                                <i class="bi bi-pencil-fill"></i>
                            </button>
                            <button class="btn btn-danger btn-sm @(canDelete ? "" : "opacity-50")"
                                    @onclick="() => { if (canDelete) EliminarTipo(tipo); }">
                                <i class="bi bi-trash-fill"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- MODAL EDICIÓN -->
@if (showEditModal)
{
    <div class="overlay">
        <div class="popup">
            <h3>Editar Tipo Actor</h3>

            <div class="form-group">
                <label>Nombre</label>
                <input class="form-control" @bind="editNombre" />
            </div>

            <div class="popup-actions">
                <button class="btn btn-success" @onclick="OnSubmitEditAsync">Guardar</button>
                <button class="btn btn-secondary" @onclick="() => showEditModal = false">Cancelar</button>
            </div>
        </div>
    </div>
}

@code {
    private const string PROYECTO = "proyecto";
    private const string TABLA = "tipoactor";

    private List<Dictionary<string, object>> tipos = new();
    private string searchTerm = "";
    private bool cargando = true;

    // Permisos
    private string[] userRoles = Array.Empty<string>();
    private bool canCreate, canEdit, canDelete;

    // Crear
    private bool showCreateModal = false;
    private string newNombre = "";

    // Editar
    private bool showEditModal = false;
    private string editId = "", editNombre = "";
    private Dictionary<string, object>? tipoOriginal;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userRoles = await JS.InvokeAsync<string[]>("eval", @"
                Object.keys(sessionStorage)
                 .filter(k => k.startsWith('rol_'))
                 .map(k => sessionStorage.getItem(k));");

            canCreate = userRoles.Contains("admin");
            canEdit = canCreate || userRoles.Contains("Validador");
            canDelete = canCreate;

            StateHasChanged();
        }
    }

    private async Task CargarDatos()
    {
        cargando = true;
        tipos = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA) ?? new();
        cargando = false;
    }

    private void BuscarTipoActor()
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return;
        var term = searchTerm.Trim().ToLowerInvariant();
        tipos = tipos.Where(t =>
            ObtenerValor(t, "nombre").ToLowerInvariant().Contains(term)
        ).ToList();
    }

    private void ShowCreateModal() => showCreateModal = true;
    private void HideCreateModal() => showCreateModal = false;

    private async Task OnSubmitCreateAsync()
    {
        var entidad = new Dictionary<string, object>
        {
            ["nombre"] = newNombre
        };
        var ok = await servicioEntidad.CrearAsync(PROYECTO, TABLA, entidad);
        if (ok)
        {
            await CargarDatos();
            HideCreateModal();
        }
    }

    private void EditarTipo(Dictionary<string, object> tipo)

    {
        tipoOriginal = tipo;
        editId = ObtenerValor(tipo, "id");
        editNombre = ObtenerValor(tipo, "nombre");
        showEditModal = true;
    }

    private async Task OnSubmitEditAsync()
    {
        if (tipoOriginal == null) return;

        var entidad = new Dictionary<string, object>
        {
            ["nombre"] = editNombre
        };

        var ok = await servicioEntidad.ActualizarAsync(PROYECTO, TABLA, "id", editId, entidad);
        if (ok)
        {
            tipoOriginal["nombre"] = editNombre;
            showEditModal = false;
        }
    }

    private void EliminarTipo(Dictionary<string, object> tipo)
    {
        var id = ObtenerValor(tipo, "id");
        tipos.Remove(tipo);
        _ = servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", id);
    }

    private string ObtenerValor(Dictionary<string, object> dic, string clave)
    {

        if (dic.TryGetValue(clave, out var val) && val != null && val.ToString() != "0")
            return val.ToString()!;
        return string.Empty;
    }
}
<style>
.overlay {
    position: fixed;
    top: 0; left: 0;
    width: 100vw; height: 100vh;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex; align-items: center; justify-content: center;
    z-index: 1000;
}
.popup {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.3);
    width: 400px;
    max-height: 80vh;
    overflow-y: auto;
}
.form-group {
    margin-bottom: 15px;
}
.popup-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 10px;
}
</style>
