@page "/indicador/crear"
@inject FrontBlazor.Services.ServicioEntidad servicioEntidad
@inject NavigationManager navigationManager

<h3>Crear Indicador</h3>

<EditForm OnValidSubmit="OnSubmit">
    <div class="mb-3">
        <label>Código</label>
        <InputText class="form-control" @bind-Value="codigo" />
    </div>

    <div class="mb-3">
        <label>Nombre</label>
        <InputText class="form-control" @bind-Value="nombre" />
    </div>

    <div class="mb-3">
        <label>Objetivo</label>
        <InputText class="form-control" @bind-Value="objetivo" />
    </div>

    <div class="mb-3">
        <label>Alcance</label>
        <InputText class="form-control" @bind-Value="alcance" />
    </div>

    <div class="mb-3">
        <label>Fórmula</label>
        <InputText class="form-control" @bind-Value="formula" />
    </div>

    <div class="mb-3">
        <label>Tipo de Indicador</label>
        <select class="form-select" @bind="fkidtipoindicador">
            <option value="">-- Selecciona --</option>
            @foreach (var item in listaTipoIndicador)
            {
                <option value="@ObtenerValor(item, "id")">@ObtenerValor(item, "nombre")</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Unidad de Medición</label>
        <select class="form-select" @bind="fkidunidadmedicion">
            <option value="">-- Selecciona --</option>
            @foreach (var item in listaUnidadMedicion)
            {
                <option value="@ObtenerValor(item, "id")">@ObtenerValor(item, "descripcion")</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Meta</label>
        <InputText class="form-control" @bind-Value="meta" />
    </div>

    <div class="mb-3">
        <label>Sentido</label>
        <select class="form-select" @bind="fkidsentido">
            <option value="">-- Selecciona --</option>
            @foreach (var item in listaSentido)
            {
                <option value="@ObtenerValor(item, "id")">@ObtenerValor(item, "nombre")</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Frecuencia</label>
        <select class="form-select" @bind="fkidfrecuencia">
            <option value="">-- Selecciona --</option>
            @foreach (var item in listaFrecuencia)
            {
                <option value="@ObtenerValor(item, "id")">@ObtenerValor(item, "nombre")</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Guardar</button>
    <button class="btn btn-secondary ms-2" @onclick="Volver">Cancelar</button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="alert alert-danger mt-3">@mensaje</div>
}

@code {
    private string? mensaje;

    // Campos del formulario
    private string codigo = string.Empty;
    private string nombre = string.Empty;
    private string objetivo = string.Empty;
    private string alcance = string.Empty;
    private string formula = string.Empty;
    private string meta = string.Empty;

    private string fkidtipoindicador = string.Empty;
    private string fkidunidadmedicion = string.Empty;
    private string fkidsentido = string.Empty;
    private string fkidfrecuencia = string.Empty;

    // Listas foráneas
    private List<Dictionary<string, object>> listaTipoIndicador = new();
    private List<Dictionary<string, object>> listaUnidadMedicion = new();
    private List<Dictionary<string, object>> listaSentido = new();
    private List<Dictionary<string, object>> listaFrecuencia = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var tipoIndicadorTask = servicioEntidad.ObtenerTodosAsync("proyecto", "tipoindicador");
            var unidadMedicionTask = servicioEntidad.ObtenerTodosAsync("proyecto", "unidadmedicion");
            var sentidoTask = servicioEntidad.ObtenerTodosAsync("proyecto", "sentido");
            var frecuenciaTask = servicioEntidad.ObtenerTodosAsync("proyecto", "frecuencia");

            await Task.WhenAll(tipoIndicadorTask, unidadMedicionTask, sentidoTask, frecuenciaTask);

            listaTipoIndicador = tipoIndicadorTask.Result ?? new();
            listaUnidadMedicion = unidadMedicionTask.Result ?? new();
            listaSentido = sentidoTask.Result ?? new();
            listaFrecuencia = frecuenciaTask.Result ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en OnInitializedAsync: {ex.Message}");
            mensaje = "Ocurrió un error al cargar los datos. Intenta recargar la página.";
        }
    }

    private async Task OnSubmit()
    {
        var nuevoRegistro = new Dictionary<string, object>
        {
            { "codigo", codigo },
            { "nombre", nombre },
            { "objetivo", objetivo },
            { "alcance", alcance },
            { "formula", formula },
            { "meta", meta },
            { "fkidtipoindicador", fkidtipoindicador },
            { "fkidunidadmedicion", fkidunidadmedicion },
            { "fkidsentido", fkidsentido },
            { "fkidfrecuencia", fkidfrecuencia }
        };

        bool creado = await servicioEntidad.CrearAsync("proyecto", "indicador", nuevoRegistro);
        if (creado)
        {
            navigationManager.NavigateTo("/indicador");
        }
        else
        {
            mensaje = "Error al crear el indicador.";
        }
    }

    private void Volver()
    {
        navigationManager.NavigateTo("/indicador");
    }

    private string ObtenerValor(Dictionary<string, object> dic, string clave)
    {
        return dic.TryGetValue(clave, out var val) ? val?.ToString() ?? "" : "";
    }
}
