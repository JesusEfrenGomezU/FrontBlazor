@page "/fuente/editar/{id}"

@using System.Collections.Generic
@using System.Threading.Tasks
@inject FrontBlazor.Services.ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms

<h1>Editar Fuente</h1>

@if (!registroCargado)
{
    <p><em>Cargando datos...</em></p>
}
else
{
    <EditForm Model="@registroActual" OnValidSubmit="OnModificar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @foreach (var columna in columnas)
        {
            <div class="mb-3">
                <label class="form-label">@columna</label>
                <InputText class="form-control"
                           @bind-Value="registroActual[columna]"
                           disabled="@("id" == columna)" />
            </div>
        }

        <button type="submit" class="btn btn-primary me-2">Guardar cambios</button>
        <button type="button" class="btn btn-secondary" @onclick="Volver">Cancelar</button>
    </EditForm>
}

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="alert alert-info mt-3">@mensaje</div>
}

@code {
    [Parameter]
    public string id { get; set; } = string.Empty;

    private const string nombreProyecto = "proyecto";
    private const string tabla = "fuente";
    private readonly List<string> columnas = new() { "id", "nombre" };
    private readonly string clavePrimaria = "id";

    private Dictionary<string, string> registroActual = new();
    private bool registroCargado = false;
    private string? mensaje;

    protected override async Task OnInitializedAsync()
    {
        await CargarRegistro();
    }

    private async Task CargarRegistro()
    {
        var resultado = await servicioEntidad.ObtenerPorClaveAsync(nombreProyecto, tabla, clavePrimaria, id);
        if (resultado != null)
        {
            registroActual = resultado.ToDictionary(kvp => kvp.Key, kvp => kvp.Value?.ToString() ?? string.Empty);
            registroCargado = true;
        }
        else
        {
            mensaje = $"No se encontró la fuente con ID {id}.";
        }
    }

    private async Task OnModificar()
    {
        var datosActualizados = registroActual.ToDictionary(kvp => kvp.Key, kvp => (object)kvp.Value);
        bool resultado = await servicioEntidad.ActualizarAsync(nombreProyecto, tabla, clavePrimaria, id, datosActualizados);
        if (resultado)
        {
            mensaje = "Fuente actualizada exitosamente.";
            // Opcional: redirigir después de guardar
            navegacionManager.NavigateTo("/fuente");
        }
        else
        {
            mensaje = "Error al actualizar la fuente.";
        }
    }

    private void Volver()
    {
        navegacionManager.NavigateTo("/fuente");
    }
}
